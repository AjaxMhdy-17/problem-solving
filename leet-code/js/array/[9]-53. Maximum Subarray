

//problem : 53. Maximum Subarray 

Given an integer array nums, find the contiguous subarray 
(containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Input: nums = [1]
Output: 1

Input: nums = [5,4,-1,7,8]
Output: 23


///solution 

i tried to get solution of this problem this way and get accepted in simple inputs but Time limit Exceed in large input 

 let n = nums.length ;
    const Max_Value = Math.pow(2,53)
    let maxSum = -Max_Value ;
    for( let i = 0 ; i < n ; i++ ){
        let sum = 0 ;
        for(let j = i ; j < n ; j++ ){
            sum += nums[j]
            if(sum >= maxSum){
                maxSum = sum 
            }
        }
    }
    return (maxSum)
   
   
   
   
then i use kadane's algorithm and get accepeted for all cases 

here is the main Solution 


//solution 


var nums = [ -2, -3, 4, -1, -2, 1, 5, -3 ]
var len = nums.length 

const Maximum_in_subArray = (nums , len) => {

    const Max_value = Math.pow(2,53)
    let MaximumSumValueInArray = -Max_value 
    let TotalSumValueInArray = 0 ;

    for( let i = 0 ; i < len ; i++ ){

        TotalSumValueInArray += nums[i]  

        if(MaximumSumValueInArray < TotalSumValueInArray){
            MaximumSumValueInArray = TotalSumValueInArray
        }

        ///here if the value of TotalSumValueInArray is less then 0 
        //then assign the of TotalSumValueInArray = 0 
        if( TotalSumValueInArray < 0 ){
            TotalSumValueInArray = 0 ;
        }

    }
    return MaximumSumValueInArray ;
}

var x = Maximum_in_subArray(nums , len)
console.log(x) 


//response from oj : Runtime: 134 ms, faster than 19.25% of JavaScript online submissions for Maximum Subarray.





   
   
