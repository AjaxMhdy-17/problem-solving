
problem : 674. Longest Continuous Increasing Subsequence

Given an unsorted array of integers nums,
return the length of the longest continuous increasing subsequence 
(i.e. subarray). The subsequence must be strictly increasing.


Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.

Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.



//solution

var nums = [1,3,5,4,7,9,12,13,11,8,10]

var findLengthOfLCIS = function(nums) {
    var n = nums.length ;
    var maxSum = 0 ; 
    var c = 0 ;
    // console.log(nums)
    for( let i = 0 ; i < n ; i++ ){
        for( let j = i + 1 ; j <= n ; j++ ){
            if( nums[i] < nums[j] ){
                // console.log(`nums[i] = ${nums[i]} < nums[j] = ${nums[j]}`)
                c += 1 ;
                // console.log(`c = ${c}`)
                i += 1 ;
                // console.log(`i = ${i} = ${nums[i]}`)
                // console.log(`j = ${i+1} = ${nums[i+1]}`)
                // console.log(`\n=============\n `)
            }
            else{
                // console.log('\n'+'this is else block'+'\n')
                if(maxSum <= c ){
                    maxSum = c 
                    // console.log(`maxSum = ${maxSum}`) 
                }
                c = 0 
                // console.log(`c = ${c}`)
                i += 1 
                // console.log(`i = ${i}`)
            }
            
        }
        // console.log(`this c is outside of j loop c = ${c}`)
    }
    // console.log(`maxsum = ${maxSum}`)
    return maxSum + 1 
};

var r = findLengthOfLCIS(nums)
console.log(r)

///response from oj : Runtime: 107 ms, faster than 16.33% of JavaScript online submissions for Longest Continuous Increasing Subsequence.
